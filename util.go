package main

import (
	"go/ast"
	"go/token"
	"golang.org/x/tools/go/analysis"
	"io"
	"os"
	"path"
	"strings"
)

// tells which filename we are handling
func getPathToFile(pass *analysis.Pass, file *ast.File) string {
	var result string
	pass.Fset.Iterate(func(f *token.File) bool {
		if int(file.Package) >= f.Base() && int(file.Package) < f.Base()+f.Size() {
			result = f.Name()
			return false
		}
		return true // continue
	})
	return result
}

// makes map: shortName->pathToPackage
func extractImports(file *ast.File) map[string]string {
	result := make(map[string]string)
	ast.Inspect(file, func(node ast.Node) bool {
		if importStmt, ok := node.(*ast.ImportSpec); ok {
			var shortName string
			if importStmt.Name == nil {
				shortName = path.Base(importStmt.Path.Value)
			} else {
				shortName = importStmt.Name.Name
			}
			shortName = strings.Trim(shortName, `"`)
			importPath := strings.Trim(importStmt.Path.Value, `"`)
			result[shortName] = importPath
		}
		return true
	})
	return result
}

// checks if .go file is generated by protoc
func isProtoCodeGeneratedFile(fullPath string) bool {
	file, err := os.Open(fullPath)
	if err != nil {
		return false
	}
	bufSize := 50
	buf := make([]byte, bufSize)
	n, err := io.ReadAtLeast(file, buf, bufSize)
	if err != nil {
		return false
	}
	if n < bufSize {
		return false
	}
	return strings.Contains(string(buf), "// Code generated by protoc-gen-go. DO NOT EDIT.")
}
